The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate span of stock’s price for all n days.
The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}

// here we can see that it is asking to find all consecutive minimum that the current stock price 
// till the maximum is reached, so it is similar to nearest greater to left problem.
// find the index of nearest greater to left and subtract it with the index of element in array.

StackElement = {
    element: int,
    index: int
}

List<int> list = new ArrayList<>();
Stack<StackElement> stack = new Stack<>();
for(int i=0; i< arr.length; i--) {
    if(stack.size()==0) {
        list.add(-1);
    }

    else if(arr[i] < stack.top().element && stack.size() > 0) {
        list.add(stack.top().index);
    }

    else if(arr[i] >= stack.top().element && stack.size() > 0) {
        while(stack.size() > 0 && arr[i] >= stack.top().element) {
            stack.pop();
        }

        if(stack.size()==0) {
            list.add(-1);
        }
        else {
            list.add(stack.top().index);
        }
    }

    stack.push({arr[i], i});
}

then subtract the each element in list with the index 
to get the answer

for(int i=0; i<list.size();i++) {
    list(i) = i - list(i)
}