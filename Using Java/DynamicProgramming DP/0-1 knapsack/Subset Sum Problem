Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum.
Example:

Input:  set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output:  True  //There is a subset (4, 5) with sum 9.

============================================================

create mat[n+1][totSumToGet+1];

if(i =;i<n+1; i++) {
    
    if(j=0;j<totSumToGet+1; j++) {
        // if an elemnt is not there but sum to get is >0 then false means not possible
        if(i==0) {
            mat[i][j] = false;
        }

        // if an elemnt is there but sum to get is 0 then ture means possible
        if(j==0) {
             mat[i][j] = true;
        }
    }
}

solve(int[] no, int totSumToGet, int n) {

    if (totSumToGet == 0)
            return true;
 
        if (n <= 0)
            return false;

    if(mat[n][totSumToGet] != -1) {
        return mat[n][totSumToGet];
    }

    if(no[n-1]<=sacWt) {
        // then we have two options either to include the  n-1 element or not

        // if element added
        profit1 =  (solve(no, totSumToGet-wt[n-1], n-1));

        // if not included the element
        profit2 =  solve(no, totSumToGet, n-1);

        mat[n][totSumToGet] = (profit1 || profit2);
        return max(profit1,profit2);
    }

    // if weight itself is greater than bag weight
    else {
        profit3 = solve(no, totSumToGet, n-1);
        mat[n][totSumToGet] = profit3
        return profit3;
    }
}