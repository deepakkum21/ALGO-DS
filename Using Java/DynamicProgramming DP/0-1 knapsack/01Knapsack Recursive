Given weights and values of n items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. 
In other words, given two integer arrays val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items respectively. 
Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. 
You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).

=================================================================

solve(int[] wt, int []val, int sacWt, int noOfEle) {

    if(sacWt==0 || noOfEle==0) {
        return 0;
    }

    if(wt[n-1]<=sacWt) {
        // then we have two options either to include the weight of n-1 element or not

        // if wight added
        profit1 =  val[n-1] + (solve(wt, val, sacWt-wt[n-1], n-1));

        // if not included the weight
        profit2 =  solve(wt, val, sacWt, n-1);

        return max(profit1,profit2);
    }

    // if weight itself is greater than bag weight
    else {
        return solve(wt, val, sacWt, n-1);
    }
}