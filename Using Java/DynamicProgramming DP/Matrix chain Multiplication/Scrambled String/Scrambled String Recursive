Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.
Below is one possible representation of A = “great”:
 great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node “gr” and swap its two children, it produces a scrambled string “rgeat”.

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that “rgeat” is a scrambled string of “great”.

Similarly, if we continue to swap the children of nodes “eat” and “at”, it produces a scrambled string “rgtae”.

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that “rgtae” is a scrambled string of “great”.
// https://www.youtube.com/watch?v=SqA0o-DGmEw&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=40
// https://www.interviewbit.com/problems/scramble-string/

====================================================================================

solve(String a, String b) {

    if(a.length != b.length) {
        return false;
    }

    if(a.equals(b)) {
        return true;
    }

    if(a.length <= 0) {
        return false;
    }
    len =a.length;

    boolean flag =false;
    for(int i = 1; i< len-1, i++) {

        //condition1 when str is swapped
        boolean condition1 = solve(a.substring(0, i), b.substring(len-i, len)) == true 
                                &&
                             solve(a.substring(i, len), b.substring(0, len-i)) == true

        //condition1 when str is not swapped
        boolean condition2 = solve(a.substring(0, i), b.substring(0, i)) == true 
                                &&
                             solve(a.substring(i, len), b.substring(i, len)) == true                 

        if(condition1 && condition2) flag= true;
    }
    return flag;
}