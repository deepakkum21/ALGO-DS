// https://www.youtube.com/watch?v=pGVguAcWX4g&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=38
// https://www.geeksforgeeks.org/boolean-parenthesization-problem-dp-37/

Evaluate Expression To True-Boolean Parenthesization Recursion
Given a boolean expression with following symbols.
Symbols
    'T' --- true 
    'F' --- false 
And following operators filled between symbols
Operators
    &   ---boolean AND
    |   --- boolean OR
    ^   --- boolean XOR 
Count the number of ways we can parenthesize the expression so that the value of expression evaluates to true.
Example:
Input: symbol[]    = {T, F, T}
       operator[]  = {^, &}
Output: 2
The given expression is "T ^ F & T", it evaluates true
in two ways "((T ^ F) & T)" and "(T ^ (F & T))"

Input: symbol[]    = {T, F, T}
       operator[]  = {^, &}
Output: 2
The given expression is "T ^ F & T", it evaluates true
in two ways "((T ^ F) & T)" and "(T ^ (F & T))"

Input: symbol[]    = {T, F, F}
       operator[]  = {^, |}
Output: 2
The given expression is "T ^ F | F", it evaluates true
in two ways "( (T ^ F) | F )" and "( T ^ (F | F) )". 

Input: symbol[]    = {T, T, F, T}
       operator[]  = {|, &, ^}
Output: 4
The given expression is "T | T & F ^ T", it evaluates true
in 4 ways ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) 
and (T|((T&F)^T)). 

=======================================================================

import java.io.*;
import java.util.*;

class GFG {
	public static int countWays(int N, String S)
	{
		return parenthesis_count(S, 0, N - 1, 1);
	}

	public static int parenthesis_count(String str, int i,
										int j, int isTrue)
	{
		if (i > j)
			return 0;

		if (i == j)
		{
			if (isTrue == 1)
			{
				return (str.charAt(i) == 'T') ? 1 : 0;
			}
			else
			{
				return (str.charAt(i) == 'F') ? 1 : 0;
			}
		}

		int temp_ans = 0;

		int leftTrue, rightTrue, leftFalse, rightFalse;

		for (int k = i + 1; k <= j - 1; k = k + 2)
		{

				// Count number of True in left Partition
				leftTrue = parenthesis_count(str, i, k - 1,	1);
			
			
			
				// Count number of False in left Partition
				leftFalse = parenthesis_count(str, i, k - 1, 0);
			
			
				// Count number of True in right Partition
				rightTrue = parenthesis_count(str, k + 1, j, 1);
			
			
				// Count number of False in right Partition
				rightFalse = parenthesis_count(str, k + 1,	j, 0);
			

			// Evaluate AND operation
			if (str.charAt(k) == '&')
			{
				if (isTrue == 1)
				{
					temp_ans
						= temp_ans + leftTrue * rightTrue;
				}
				else
				{
					temp_ans = temp_ans
							+ leftTrue * rightFalse
							+ leftFalse * rightTrue
							+ leftFalse * rightFalse;
				}
			}
			// Evaluate OR operation
			else if (str.charAt(k) == '|')
			{
				if (isTrue == 1)
				{
					temp_ans = temp_ans
							+ leftTrue * rightTrue
							+ leftTrue * rightFalse
							+ leftFalse * rightTrue;
				}
				else
				{
					temp_ans
						= temp_ans + leftFalse * rightFalse;
				}
			}
		
			// Evaluate XOR operation
			else if (str.charAt(k) == '^')
			{
				if (isTrue == 1)
				{
					temp_ans = temp_ans
							+ leftTrue * rightFalse
							+ leftFalse * rightTrue;
				}
				else
				{
					temp_ans = temp_ans
							+ leftTrue * rightTrue
							+ leftFalse * rightFalse;
				}
			}
			
		}
		return temp_ans;
	}

// Driver code
	public static void main(String[] args)
	{
		String symbols = "TTFT";
		String operators = "|&^";
		StringBuilder S = new StringBuilder();
		int j = 0;

		for (int i = 0; i < symbols.length(); i++)
		{
			S.append(symbols.charAt(i));
			if (j < operators.length())
				S.append(operators.charAt(j++));
		}

		// We obtain the string T|T&F^T
		int N = S.length();

		// There are 4 ways
		// ((T|T)&(F^T)), (T|(T&(F^T))), (((T|T)&F)^T) and
		// (T|((T&F)^T))
		System.out.println(countWays(N, S.toString()));
	}
}

