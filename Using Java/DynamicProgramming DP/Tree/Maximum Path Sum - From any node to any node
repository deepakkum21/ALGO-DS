// https://www.youtube.com/watch?v=Osz-Vwer6rw&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=48
// https://leetcode.com/problems/binary-tree-maximum-path-sum/

Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections.
The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

-10
/ \
 9 20
/ \
 15 7

Output: 42

===========================================================================

solve(Node root, int result) {
if(root == null) {
return 0;
}

    left = solve(root.left, res);
    right = solve(root.right, res);

    temp = max(max(left, right) + root.value,  root.value);
    ans = max(temp , left+right+ root.value);

    res = max(temp, ans) ;

    return temp;

}
